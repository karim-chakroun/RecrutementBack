// <auto-generated />
using System;
using AppRecrutement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AppRecrutement.Migrations
{
    [DbContext(typeof(AuthenticationContext))]
    partial class AuthenticationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AppRecrutement.Models.Candidature", b =>
                {
                    b.Property<Guid>("CandidatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CandidatId")
                        .HasColumnType("text");

                    b.Property<Guid?>("CorrespondanceOffreID")
                        .HasColumnType("uuid");

                    b.Property<string>("Curriculum_Vitae")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Date_postulation")
                        .HasColumnType("text");

                    b.Property<int>("Etat")
                        .HasColumnType("integer");

                    b.Property<string>("Letrre_motivation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Motivation_poste")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Questions")
                        .HasColumnType("text");

                    b.HasKey("CandidatureID");

                    b.HasIndex("CandidatId");

                    b.HasIndex("CorrespondanceOffreID");

                    b.ToTable("Candidature");
                });

            modelBuilder.Entity("AppRecrutement.Models.Departement", b =>
                {
                    b.Property<Guid>("DepartementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Libelle")
                        .HasColumnType("text");

                    b.HasKey("DepartementID");

                    b.ToTable("Departement");
                });

            modelBuilder.Entity("AppRecrutement.Models.EntretienRH", b =>
                {
                    b.Property<Guid>("EntretienID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Date")
                        .HasColumnType("integer");

                    b.Property<int>("Durée")
                        .HasColumnType("integer");

                    b.Property<string>("Equipe_recrutement")
                        .HasColumnType("text");

                    b.Property<int>("Heure")
                        .HasColumnType("integer");

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RendezVousOffreID")
                        .HasColumnType("uuid");

                    b.HasKey("EntretienID");

                    b.HasIndex("RendezVousOffreID");

                    b.ToTable("EntretienRH");
                });

            modelBuilder.Entity("AppRecrutement.Models.Language", b =>
                {
                    b.Property<Guid>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Libelle")
                        .HasColumnType("text");

                    b.HasKey("LanguageID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("AppRecrutement.Models.Offre", b =>
                {
                    b.Property<Guid>("OffreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Activités_principales")
                        .HasColumnType("text");

                    b.Property<string>("Compétences_techniques")
                        .HasColumnType("text");

                    b.Property<string>("Date_début")
                        .HasColumnType("text");

                    b.Property<string>("Diplome_démandé")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Département")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Experience_démandée")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Niveau_démandé")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomOffre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Qualités_interpersonnelles")
                        .HasColumnType("text");

                    b.Property<string>("Région")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type_contrat")
                        .HasColumnType("text");

                    b.Property<long>("salaire")
                        .HasColumnType("bigint");

                    b.HasKey("OffreID");

                    b.ToTable("Offre");
                });

            modelBuilder.Entity("AppRecrutement.Models.TestTechnique", b =>
                {
                    b.Property<Guid>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Date_dépot")
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<int>("Durée")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OffreTestOffreID")
                        .HasColumnType("uuid");

                    b.Property<string>("lien_test")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestID");

                    b.HasIndex("OffreTestOffreID");

                    b.ToTable("TestTechnique");
                });

            modelBuilder.Entity("ApplicationUserLanguage", b =>
                {
                    b.Property<Guid>("LanguagesLanguageID")
                        .HasColumnType("uuid");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("LanguagesLanguageID", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserLanguage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppRecrutement.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Date_début_dispo")
                        .HasColumnType("text");

                    b.Property<string>("Date_naissance")
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartementsDepartementID")
                        .HasColumnType("uuid");

                    b.Property<string>("Ecole")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Nb_années_expérience")
                        .HasColumnType("integer");

                    b.Property<string>("Niveau_etude")
                        .HasColumnType("text");

                    b.Property<string>("Pays")
                        .HasColumnType("text");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<string>("Situation_emploi_actuelle")
                        .HasColumnType("text");

                    b.Property<string>("Spécialité")
                        .HasColumnType("text");

                    b.Property<string>("Ville")
                        .HasColumnType("text");

                    b.HasIndex("DepartementsDepartementID");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("AppRecrutement.Models.Candidature", b =>
                {
                    b.HasOne("AppRecrutement.Models.ApplicationUser", "Candidat")
                        .WithMany("Candidatures")
                        .HasForeignKey("CandidatId");

                    b.HasOne("AppRecrutement.Models.Offre", "Correspondance")
                        .WithMany("CandidaturesOffre")
                        .HasForeignKey("CorrespondanceOffreID");

                    b.Navigation("Candidat");

                    b.Navigation("Correspondance");
                });

            modelBuilder.Entity("AppRecrutement.Models.EntretienRH", b =>
                {
                    b.HasOne("AppRecrutement.Models.Offre", "RendezVous")
                        .WithMany("EntretienRHs")
                        .HasForeignKey("RendezVousOffreID");

                    b.Navigation("RendezVous");
                });

            modelBuilder.Entity("AppRecrutement.Models.TestTechnique", b =>
                {
                    b.HasOne("AppRecrutement.Models.Offre", "OffreTest")
                        .WithMany("Tests")
                        .HasForeignKey("OffreTestOffreID");

                    b.Navigation("OffreTest");
                });

            modelBuilder.Entity("ApplicationUserLanguage", b =>
                {
                    b.HasOne("AppRecrutement.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesLanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppRecrutement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppRecrutement.Models.ApplicationUser", b =>
                {
                    b.HasOne("AppRecrutement.Models.Departement", "Departements")
                        .WithMany("Users")
                        .HasForeignKey("DepartementsDepartementID");

                    b.Navigation("Departements");
                });

            modelBuilder.Entity("AppRecrutement.Models.Departement", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AppRecrutement.Models.Offre", b =>
                {
                    b.Navigation("CandidaturesOffre");

                    b.Navigation("EntretienRHs");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("AppRecrutement.Models.ApplicationUser", b =>
                {
                    b.Navigation("Candidatures");
                });
#pragma warning restore 612, 618
        }
    }
}
